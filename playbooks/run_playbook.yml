---
- name: Run Playbook from Repository
  hosts: localhost
  gather_facts: true
  vars:
    playbook_dir: "{{ ansible_playbook_path }}/{{ repo_name }}"
    backup_dir: "{{ ansible_playbook_path }}/backups/{{ repo_name }}"
    log_dir: "{{ ansible_playbook_path }}/logs/{{ repo_name }}"
    cleanup_days: "{{ cleanup_days | default(7) }}"
    log_file: "{{ log_dir }}/{{ ansible_date_time.iso8601_basic }}.log"
  tasks:
    - name: Create required directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ backup_dir }}"
        - "{{ log_dir }}"

    - name: Initialize log file
      copy:
        content: |
          === Playbook Execution Log ===
          Start Time: {{ ansible_date_time.iso8601 }}
          Repository: {{ repo_url }}
          Branch: {{ branch | default('main') }}
          Playbook: {{ playbook_name }}.yml
          ============================
        dest: "{{ log_file }}"
        mode: '0644'

    - name: Backup existing repository if it exists
      block:
        - name: Create backup archive
          archive:
            path: "{{ playbook_dir }}"
            dest: "{{ backup_dir }}/{{ repo_name }}-{{ ansible_date_time.iso8601_basic }}.tar.gz"
            format: gz
          when: ansible_check_mode == false
          register: backup_result

        - name: Log backup result
          copy:
            content: "Backup created: {{ backup_result.dest }}"
            dest: "{{ log_file }}"
            mode: '0644'
          when: ansible_check_mode == false
      when: ansible_check_mode == false
      rescue:
        - name: Log backup failure
          copy:
            content: "Backup failed: {{ ansible_failed_result.msg }}"
            dest: "{{ log_file }}"
            mode: '0644'

    - name: Cleanup old backups and logs
      block:
        - name: Find old backups
          find:
            paths: "{{ backup_dir }}"
            patterns: "*.tar.gz"
            age: "{{ cleanup_days }}d"
          register: old_backups

        - name: Find old logs
          find:
            paths: "{{ log_dir }}"
            patterns: "*.log"
            age: "{{ cleanup_days }}d"
          register: old_logs

        - name: Remove old backups and logs
          file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ old_backups.files + old_logs.files }}"
          when: (old_backups.files | length + old_logs.files | length) > 0

        - name: Log cleanup results
          copy:
            content: |
              Cleanup Results:
              - Removed {{ old_backups.files | length }} old backups
              - Removed {{ old_logs.files | length }} old logs
            dest: "{{ log_file }}"
            mode: '0644'
      when: ansible_check_mode == false

    - name: Ensure playbook directory exists
      file:
        path: "{{ playbook_dir }}"
        state: directory
        mode: '0755'

    - name: Clone or update repository
      block:
        - name: Clone or update repository
          git:
            repo: "{{ repo_url }}"
            dest: "{{ playbook_dir }}"
            version: "{{ branch | default('main') }}"
            force: yes
            update: yes
          register: git_clone

        - name: Log repository status
          copy:
            content: "Repository {{ 'updated' if git_clone.changed else 'already up to date' }}"
            dest: "{{ log_file }}"
            mode: '0644'
      rescue:
        - name: Log git error
          copy:
            content: "Git operation failed: {{ ansible_failed_result.msg }}"
            dest: "{{ log_file }}"
            mode: '0644'
          failed_when: true

    - name: Verify playbook exists
      stat:
        path: "{{ playbook_dir }}/{{ playbook_name }}.yml"
      register: playbook_file
      failed_when: not playbook_file.stat.exists

    - name: Run the specified playbook
      block:
        - name: Run playbook
          ansible.builtin.command:
            cmd: "ansible-playbook {{ playbook_dir }}/{{ playbook_name }}.yml {{ extra_args | default('') }}"
          register: playbook_result
          changed_when: true
          failed_when: playbook_result.rc != 0

        - name: Log playbook success
          copy:
            content: |
              Playbook execution succeeded
              Output:
              {{ playbook_result.stdout_lines | join('\n') }}
            dest: "{{ log_file }}"
            mode: '0644'
      rescue:
        - name: Log playbook error
          copy:
            content: |
              Playbook execution failed
              Error: {{ ansible_failed_result.msg }}
              Output:
              {{ ansible_failed_result.stdout_lines | join('\n') }}
            dest: "{{ log_file }}"
            mode: '0644'

        - name: Attempt rollback
          block:
            - name: Find latest backup
              find:
                paths: "{{ backup_dir }}"
                patterns: "*.tar.gz"
                age: "{{ cleanup_days }}d"
              register: backups

            - name: Restore from latest backup
              unarchive:
                src: "{{ backups.files | sort(attribute='mtime') | last.path }}"
                dest: "{{ ansible_playbook_path }}"
                remote_src: yes
              when: backups.files | length > 0
              register: rollback_result

            - name: Log rollback status
              copy:
                content: |
                  Rollback {{ 'successful' if backups.files | length > 0 else 'failed - no backup available' }}
                  {{ 'Restored from: ' + backups.files | sort(attribute='mtime') | last.path if backups.files | length > 0 else '' }}
                dest: "{{ log_file }}"
                mode: '0644'
          when: rollback | default(false)
          failed_when: false

    - name: Final status
      debug:
        msg: |
          Execution Summary:
          - Repository: {{ repo_url }}
          - Branch: {{ branch | default('main') }}
          - Playbook: {{ playbook_name }}.yml
          - Status: {{ 'Success' if playbook_result.rc == 0 else 'Failed' }}
          - Backup: {{ 'Created' if ansible_check_mode == false else 'Skipped (check mode)' }}
          - Rollback: {{ 'Attempted' if rollback | default(false) else 'Not attempted' }}
          - Log File: {{ log_file }} 