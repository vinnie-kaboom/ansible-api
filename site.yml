---
- name: Main playbook
  hosts: all
  become: yes
  vars:
    env: "{{ env | default('prod') }}"
    commit: "{{ commit | default('unknown') }}"
    branch: "{{ branch | default('unknown') }}"
    triggered_by: "{{ triggered_by | default('unknown') }}"
    app_version: "{{ app_version | default('latest') }}"
    app_name: "{{ app_name | default('myapp') }}"
    backup_dir: "/var/backups/{{ app_name }}"
    monitoring_dir: "/opt/monitoring"
    rollback_version: "{{ rollback_version | default('') }}"

  tasks:
    - name: Display deployment information
      debug:
        msg: |
          Deployment Information:
          - Environment: {{ env }}
          - Commit: {{ commit }}
          - Branch: {{ branch }}
          - Triggered by: {{ triggered_by }}
          - Timestamp: {{ ansible_date_time.iso8601 }}
          - App Version: {{ app_version }}
          - Rollback Version: {{ rollback_version }}

    # Security tasks
    - name: Update SSH configuration
      template:
        src: templates/ssh/sshd_config.j2
        dest: /etc/ssh/sshd_config
        mode: '0600'
      notify: restart sshd

    - name: Ensure fail2ban is installed
      package:
        name: fail2ban
        state: present

    - name: Configure fail2ban
      template:
        src: templates/fail2ban/jail.local.j2
        dest: /etc/fail2ban/jail.local
        mode: '0644'
      notify: restart fail2ban

    - name: Set up firewall rules
      firewalld:
        service: "{{ item }}"
        state: enabled
        permanent: yes
        immediate: yes
      loop:
        - ssh
        - http
        - https
      when: env == 'prod'

    # System updates and package installation
    - name: Update system packages
      package:
        name: "*"
        state: latest
      when: env == 'prod'

    - name: Install required packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - python3
        - python3-pip
        - nginx
        - docker
        - docker-compose
        - prometheus-node-exporter
        - prometheus-nginx-exporter

    # Backup tasks
    - name: Create backup directory
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0700'

    - name: Backup current application
      archive:
        path: "/opt/{{ app_name }}"
        dest: "{{ backup_dir }}/{{ app_name }}-{{ ansible_date_time.iso8601_basic }}.tar.gz"
        format: gz
      when: not rollback_version

    - name: Backup database
      shell: |
        pg_dump -h {{ db_host }} -U {{ db_user }} {{ db_name }} | gzip > {{ backup_dir }}/db-{{ ansible_date_time.iso8601_basic }}.sql.gz
      environment:
        PGPASSWORD: "{{ db_password }}"
      when: not rollback_version
      ignore_errors: yes

    # Application deployment
    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create application directory
      file:
        path: "/opt/{{ app_name }}"
        state: directory
        mode: '0755'

    - name: Clone application repository
      git:
        repo: "https://github.com/your-org/{{ app_name }}.git"
        dest: "/opt/{{ app_name }}"
        version: "{{ app_version }}"
      when: app_version != 'latest' and not rollback_version

    - name: Pull latest application version
      git:
        repo: "https://github.com/your-org/{{ app_name }}.git"
        dest: "/opt/{{ app_name }}"
      when: app_version == 'latest' and not rollback_version

    - name: Rollback to specific version
      git:
        repo: "https://github.com/your-org/{{ app_name }}.git"
        dest: "/opt/{{ app_name }}"
        version: "{{ rollback_version }}"
      when: rollback_version

    - name: Copy environment file
      template:
        src: "templates/{{ env }}/env.j2"
        dest: "/opt/{{ app_name }}/.env"
        mode: '0644'

    - name: Start application with Docker Compose
      docker_compose:
        project_src: "/opt/{{ app_name }}"
        state: present
        build: yes
        pull: yes
        remove_orphans: yes

    # Monitoring setup
    - name: Set up Prometheus Node Exporter
      service:
        name: prometheus-node-exporter
        state: started
        enabled: yes

    - name: Set up Prometheus Nginx Exporter
      service:
        name: prometheus-nginx-exporter
        state: started
        enabled: yes

    - name: Configure Prometheus
      template:
        src: templates/prometheus/prometheus.yml.j2
        dest: /etc/prometheus/prometheus.yml
        mode: '0644'
      notify: restart prometheus

    # Health checks
    - name: Check application health
      uri:
        url: "http://localhost:8080/health"
        return_content: yes
      register: health_check
      until: health_check.status == 200
      retries: 5
      delay: 10
      ignore_errors: yes

    - name: Display health check result
      debug:
        msg: "Application health check: {{ 'Healthy' if health_check.status == 200 else 'Unhealthy' }}"

    # Web server configuration
    - name: Configure Nginx
      template:
        src: "templates/nginx/{{ env }}/default.conf.j2"
        dest: "/etc/nginx/conf.d/default.conf"
        mode: '0644'
      notify: restart nginx

    - name: Ensure Nginx is running
      service:
        name: nginx
        state: started
        enabled: yes

    # Cleanup old backups
    - name: Cleanup old backups
      find:
        paths: "{{ backup_dir }}"
        patterns: "*.tar.gz,*.sql.gz"
        age: "7d"
        recurse: yes
      register: old_backups

    - name: Remove old backups
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ old_backups.files }}"
      when: old_backups.files | length > 0

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: restart sshd
      service:
        name: sshd
        state: restarted

    - name: restart fail2ban
      service:
        name: fail2ban
        state: restarted

    - name: restart prometheus
      service:
        name: prometheus
        state: restarted 