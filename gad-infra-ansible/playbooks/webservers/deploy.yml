---
# Webserver deployment playbook
# Deploys and configures nginx webservers using the webserver role

- name: Deploy nginx webservers
  hosts: webservers
  become: yes
  gather_facts: yes
  
  vars:
    # Override default variables if needed
    nginx_server_tokens: "off"
    nginx_client_max_body_size: "64m"
    firewall_services:
      - http
      - https
  
  pre_tasks:
    - name: Display target hosts
      debug:
        msg: "Deploying nginx to: {{ inventory_hostname }}"
      tags:
        - debug
        - webserver

    - name: Ensure required directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /var/log/nginx
        - /var/cache/nginx
        - /var/www/html
      tags:
        - webserver
        - directories

  roles:
    - role: common_all
      when: common_role_enabled | default(true)
      tags:
        - common
        - system
    
    - role: webserver
      tags:
        - webserver
        - nginx

  post_tasks:
    - name: Verify nginx is accessible
      uri:
        url: "http://{{ ansible_default_ipv4.address }}"
        method: GET
        timeout: 10
        status_code: [200, 403]
      register: nginx_health_check
      ignore_errors: yes
      delegate_to: localhost
      run_once: true
      tags:
        - webserver
        - verify
        - test

    - name: Display deployment results
      debug:
        msg:
          - "Nginx deployment completed on {{ inventory_hostname }}"
          - "Service status: {{ ansible_facts.services['nginx'].state | default('unknown') }}"
          - "Health check: {{ 'PASSED' if nginx_health_check.status is defined and nginx_health_check.status == 200 else 'FAILED' }}"
          - "Access URL: http://{{ ansible_default_ipv4.address }}"
      tags:
        - webserver
        - results
        - debug

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
      listen: "restart nginx" 